import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { login } from '../Auth-slice';

const Login = () => {
    const [email, setEmail] = React.useState('');
    const [password, setPassword] = React.useState('');
    const dispatch = useDispatch();
    const token = useSelector((state) => state.auth.token); // استخدام useSelector هنا

    const handleLogin = async (e) => {
        e.preventDefault();
        const credentials = { email, password };

        try {
            await dispatch(login(credentials)).unwrap(); // انتظر النتيجة
            // لا تحاول الوصول إلى التوكن هنا، لأنه قد لا يكون قد تم تحديثه بعد
        } catch (error) {
            console.error("Login failed:", error);
        }
    };

    useEffect(() => {
        console.log("Token after login:", token); // تحقق من التوكن بعد تسجيل الدخول
    }, [token]); // هذا يعتمد على التوكن

    return (
        <div>
            <h1>Login</h1>
            <form onSubmit={handleLogin}>
                <input
                    type="email"
                    name="email"
                    placeholder="Email"
                    value={email}
                    onChange={e => setEmail(e.target.value)}
                    required
                />
                <input
                    type="password"
                    name="password"
                    placeholder="Password"
                    value={password}
                    onChange={e => setPassword(e.target.value)}
                    required
                />
                <button type="submit">Login</button>
            </form>
            {token && <p>Token: {token}</p>} {/* عرض التوكن إذا كان موجودًا */}
        </div>
    );
};

//export default Login;
//
// authSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

export const login = createAsyncThunk(
    'auth/login',
    async (credentials) => {
        const response = await axios.post('http://127.0.0.1:8000/api/login', credentials);
        return response.data; // تأكد من إرجاع كل البيانات
    }
);

const authSlice = createSlice({
    name: 'auth',
    initialState: {
        token: null,
        user: null,
    },
    reducers: {},
    extraReducers: (builder) => {
        builder.addCase(login.fulfilled, (state, action) => {
            state.user = action.payload.data.user; 
            state.token = action.payload.data.token; // تأكد من الوصول بشكل صحيح إلى التوكن
        console.log("User logged in. Token:", state.token);
        });
    }
});

//export default authSlice.reducer;
//
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axios from 'axios';

// جلب جميع المنتجات
export const fetchAllProducts = createAsyncThunk(
    'productSlice/fetchAllProducts',
    async () => {
        const res = await axios.get(`http://127.0.0.1:8000/api/getAllproducts`);
        return res.data;
    }
);

// جلب منتج بواسطة ID
export const fetchProductById = createAsyncThunk(
    'productSlice/fetchProductById',
    async (productId) => {
        const res = await axios.get(`http://127.0.0.1:8000/api/getProductById/${productId}`);
        return res.data;
    }
);

// حذف منتج
export const fetchDeleteProduct = createAsyncThunk(
    'productSlice/fetchDeleteProduct', // إضافة نوع للدالة
    async (productId, { getState, dispatch }) => {
        const { auth } = getState();
        const token = auth.token;

        try {
            await axios.delete(`http://127.0.0.1:8000/api/deleteProduct/${productId}`, {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            // إرجاع ID المنتج المحذوف
            return productId;
        } catch (error) {
            throw new Error(error.response.data.error || 'حدث خطأ عند حذف المنتج.');
        }
    }
);

// تحديث منتج
export const fetchUpdateProduct = createAsyncThunk(
    'productSlice/fetchUpdateProduct',
    async ({ productId, updateProduct }, { getState }) => {
        const state = getState();
        const token = state.auth.token;
        const role = state.auth.role;

        if (role !== '1') {
            throw new Error('ليس لديك صلاحيات لتعديل المنتج');
        }

        const res = await axios.put(`http://127.0.0.1:8000/api/updateProduct/${productId}`, updateProduct, {
            headers: {
                Authorization: `Bearer ${token}`,
                'Content-Type': 'application/json',
            },
        });
        return res.data;
    }
);

// إضافة منتج
export const fetchAddProduct = createAsyncThunk(
    'productSlice/fetchAddProduct',
    async (newProduct, { getState }) => {
        const state = getState();
        const token = state.auth.token;
        const role = state.auth.role;

        if (role !== '1') {
            throw new Error('ليس لديك صلاحيات لإضافة منتج');
        }

        const response = await axios.post(`http://127.0.0.1:8000/api/add_product`, newProduct, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });
        return response.data;
    }
);

// تعريف slice
export const productSlice = createSlice({
    name: 'productSlice',
    initialState: {
        products: [],
        currentProduct: null,
        loading: false,
        error: null,
        deleteError: null,
    },
    reducers: {
        deleteProductSuccess(state, action) {
            state.products = state.products.filter(product => product.id !== action.payload);
            state.deleteError = null; // إعادة تعيين خطأ الحذف
        },
        deleteProductError(state, action) {
            state.deleteError = action.payload;
        },
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchAllProducts.pending, (state) => {
                state.loading = true;
                state.error = null;
            })
            .addCase(fetchAllProducts.fulfilled, (state, action) => {
                state.loading = false;
                state.products = action.payload;
            })
            .addCase(fetchAllProducts.rejected, (state, action) => {
                state.loading = false;
                state.error = action.error.message;
            })
            .addCase(fetchProductById.fulfilled, (state, action) => {
                state.currentProduct = action.payload;
            })
            .addCase(fetchAddProduct.fulfilled, (state, action) => {
                state.products.push(action.payload);
            })
            .addCase(fetchDeleteProduct.pending, (state) => {
                state.deleteError = null;
            })
            .addCase(fetchDeleteProduct.fulfilled, (state, action) => {
                state.products = state.products.filter(product => product.id !== action.payload);
            })
            .addCase(fetchDeleteProduct.rejected, (state, action) => {
                state.deleteError = action.error.message;
            })
            .addCase(fetchUpdateProduct.fulfilled, (state, action) => {
                const index = state.products.findIndex(product => product.id === action.payload.id);
                if (index !== -1) {
                    state.products[index] = { ...state.products[index], ...action.payload };
                }
            })
            .addCase(fetchUpdateProduct.rejected, (state, action) => {
                state.error = action.error.message;
            });
    }
});

// تصدير الـ actions و الـ reducer
export const { deleteProductSuccess, deleteProductError } = productSlice.actions;

export default productSlice.reducer;